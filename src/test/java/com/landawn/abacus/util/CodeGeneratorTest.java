/*
 * Copyright (c) 2015, Haiyang Li. All rights reserved.
 */

package com.landawn.abacus.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.Date;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import org.junit.Test;

import com.landawn.abacus.AbstractTest;
import com.landawn.abacus.AbstractEntityManager0Test;
import com.landawn.abacus.DataSource;
import com.landawn.abacus.core.AbstractDirtyMarker;
import com.landawn.abacus.metadata.Column;
import com.landawn.abacus.metadata.EntityDefXmlEle.EntityDefEle;
import com.landawn.abacus.metadata.Table;
import com.landawn.abacus.metadata.sql.SQLDatabase;
import com.landawn.abacus.metadata.sql.SQLEntityDefinitionFactory;
import com.landawn.abacus.metadata.sql.SQLTable;
import com.landawn.abacus.util.CodeGenerator.ParentPropertyMode;
import com.landawn.abacus.util.CodeGenerator2.EntityMode;
import com.landawn.abacus.util.u.Optional;
import com.landawn.abacus.util.entity.AutoGeneratedClass;
import com.myPackage.y.Account2;

/**
 *
 * @since 0.8
 * 
 * @author Haiyang Li
 */
public class CodeGeneratorTest extends AbstractTest {
    static final DataSource ds;
    static {
        Properties<String, String> props = PropertiesUtil.load(new File("./config/abacus-entity-manager.properties"));
        Properties<String, String> jdbcProperties = new Properties<String, String>();
        for (Map.Entry<String, String> entry : props.entrySet()) {
            if (entry.getKey().startsWith("jdbc.")) {
                jdbcProperties.put(entry.getKey().substring(5), entry.getValue());
            }
        }

        ds = JdbcUtil.createDataSource(jdbcProperties);
    }

    static final String dbName = "abacustest";
    static final String srcPath = "./src/test/java/";
    static final boolean sqlLog = false;
    static final boolean reinitEntityDefinition = true;
    static final boolean reinitClass = true;
    static final List<String> selectedTables = new ArrayList<>();

    static {
        selectedTables.add("data_type");
        selectedTables.add("account");
        selectedTables.add("login");
        selectedTables.add("account_contact");
        selectedTables.add("account_device");
        selectedTables.add("acl_user");
        selectedTables.add("acl_group");
        selectedTables.add("acl_user_group_relationship");

        selectedTables.add("acl_target");
        selectedTables.add("acl_ug_target_relationship");
    }

    @Test
    public void testExtendDirtyBasic() throws Exception {
        generateCode("extendDirtyBasic", "com.landawn.abacus.entity.extendDirty.basic", EntityMode.EXTEND_DIRTY_MARKER, null);
    }

    @Test
    public void testExtendDirtyLV() throws Exception {
        generateCode("extendDirtyLV", "com.landawn.abacus.entity.extendDirty.lv", EntityMode.EXTEND_DIRTY_MARKER, null);
    }

    @Test
    public void testExtendDirtyVC() throws Exception {
        generateCode("extendDirtyVC", "com.landawn.abacus.entity.extendDirty.vc", EntityMode.EXTEND_DIRTY_MARKER, null);
    }

    @Test
    public void testExtendDirtyLVC() throws Exception {
        String pkgName = "com.landawn.abacus.entity.extendDirty.lvc";
        generateCode("extendDirtyLVC", pkgName, EntityMode.EXTEND_DIRTY_MARKER, null);

        String sqlMapperFile = "./src/test/java/com/landawn/abacus/entity/extendDirty/lvc/extendDirtyLVCSqlMapper.xml";
        String className = "ExtendDirtyLVCSqlMapper";
        Method id2VarName = null;
        CodeGenerator2.generateSQLMapperIdTable(sqlMapperFile, srcPath, pkgName, className, id2VarName);
    }

    @Test
    public void testImplDirtyBasic() throws Exception {
        Map<String, Set<String>> excludedEntityPropNames = N.asMap("Acco1.*", N.asSet("firstName", "middleName", "lastName"));
        generateCode("implDirtyBasic", "com.landawn.abacus.entity.implDirty.basic", EntityMode.IMPL_DIRTY_MARKER, excludedEntityPropNames);
    }

    @Test
    public void testImplDirtyLV() throws Exception {
        Map<String, Set<String>> excludedEntityPropNames = N.asMap("Account1", N.asSet("firstName", "middleName", "lastName"));
        generateCode("implDirtyLV", "com.landawn.abacus.entity.implDirty.lv", EntityMode.IMPL_DIRTY_MARKER, excludedEntityPropNames);
    }

    @Test
    public void testImplDirtyVC() throws Exception {
        Map<String, Set<String>> excludedEntityPropNames = N.asMap("Account1", N.asSet("firstName", "middleName", "lastName"));
        generateCode("implDirtyVC", "com.landawn.abacus.entity.implDirty.vc", EntityMode.IMPL_DIRTY_MARKER, excludedEntityPropNames);
    }

    @Test
    public void testImplDirtyLVC() throws Exception {
        Map<String, Set<String>> excludedEntityPropNames = N.asMap("Account1", N.asSet("firstName", "middleName", "lastName"));
        generateCode("implDirtyLVC", "com.landawn.abacus.entity.implDirty.lvc", EntityMode.IMPL_DIRTY_MARKER, excludedEntityPropNames);
    }

    @Test
    public void testPjoBasic() throws Exception {
        generateCode("pjoBasic", "com.landawn.abacus.entity.pjo.basic", EntityMode.POJO, null);
    }

    @Test
    public void testPjoLV() throws Exception {
        generateCode("pjoLV", "com.landawn.abacus.entity.pjo.lv", EntityMode.POJO, null);
    }

    @Test
    public void testPjoVC() throws Exception {
        generateCode("pjoVC", "com.landawn.abacus.entity.pjo.vc", EntityMode.POJO, null);
    }

    public void testPjoLVC() throws Exception {
        generateCode("pjoLVC", "com.landawn.abacus.entity.pjo.lvc", EntityMode.POJO, null);
    }

    public void testHBase() throws Exception {
        generateCode("hbase", "com.landawn.abacus.entity.hbase", EntityMode.POJO_WITH_PROP_NAME_TABLE, null);
    }

    void generateCode(String domainName, String packageName, EntityMode entityMode, Map<String, Set<String>> excludedEntityPropNames) throws Exception {
        Connection conn = ds.getConnection();

        try {
            Map<String, String> attrs = new HashMap<String, String>();
            attrs.put(EntityDefEle.PACKAGE, packageName);

            String directoryPath = srcPath + packageName.replace('.', '/') + "/";

            // create entity definition from database.
            File entityDefinitionFile = new File(directoryPath + domainName + "EntityDefinition.xml");

            if (reinitEntityDefinition && !"hbase".equals(domainName)) {
                SQLDatabase database = new SQLDatabase(conn, dbName, selectedTables);

                CodeGenerator2.database2EntityDefinitionXml(database, entityDefinitionFile, attrs, null, null, null, null, excludedEntityPropNames);
            }

            if (reinitClass) {
                Method propName2MethodName = ClassUtil.getDeclaredMethod(this.getClass(), "propName2MethodName", String.class);
                Class<?> extendedClass = null;
                CodeGenerator2.entityDefinitionXml2Class(domainName, entityDefinitionFile, srcPath, entityMode, null, propName2MethodName, true, extendedClass);
                if (entityMode == EntityMode.POJO) {
                    CodeGenerator2.entityDefinitionXml2ColumnNameTable(domainName, entityDefinitionFile, srcPath, null, CodeGenerator._N);
                } else {
                    CodeGenerator2.entityDefinitionXml2ColumnNameTable(domainName, entityDefinitionFile, srcPath, null, N.class);
                }
            }
        } finally {
            conn.close();
        }

        N.println("==============SUCCESS: " + domainName + "===================");
    }

    public void testDatabase2Xml() throws Exception {
        Connection conn = ds.getConnection();
        SQLDatabase database = new SQLDatabase(conn, AbstractEntityManager0Test.databaseName, selectedTables);
        JdbcUtil.closeQuietly(null, conn);

        N.println(database.getProductName());
        N.println(database.getProductVersion());
        N.println(database.hashCode());
        N.println(database.getAttributes());
        N.println(database.getAttribute("name"));

        File databaseXml = new File("./src/test/java/database.xml");
        Map<String, String> databaseAttrs = N.asMap("hello", "hi");
        CodeGenerator2.database2Xml(database, databaseXml, databaseAttrs);

        File tableXml = new File("./src/test/java/table.xml");
        Table table = database.getTableList().iterator().next();

        File entityDefinitionXml = new File("./src/test/java/entityDefinition.xml");
        CodeGenerator2.database2EntityDefinitionXml(database, entityDefinitionXml);

        Method tableName2EntityName = ClassUtil.getDeclaredMethod(this.getClass(), "tableName2EntityName2", String.class);
        Method columnName2PropName = ClassUtil.getDeclaredMethod(this.getClass(), "columnName2PropName2", String.class);
        CodeGenerator2.database2EntityDefinitionXml(database, entityDefinitionXml, null, tableName2EntityName, columnName2PropName, null);

        InputStream is = new FileInputStream(databaseXml);
        SQLDatabase database2 = new SQLDatabase(is);
        IOUtil.close(is);
        N.println(database2);
        assertEquals(database, database2);

        is = new FileInputStream(tableXml);

        SQLTable table2 = new SQLTable(is);
        IOUtil.close(is);

        is = new FileInputStream(tableXml);

        SQLTable table3 = new SQLTable(is);
        IOUtil.close(is);

        N.println(table2);
        N.println(table2.hashCode());
        N.println(table2.toString());
        // assertEquals(table, table2);

        Column column = table2.getColumn("id");
        N.println(column.getName());
        N.println(column.getDefaultValue());
        N.println(column.isUnique());
        N.println(column.isNullable());
        N.println(column.isSearchable());
        N.println(column.isCaseSensitive());
        N.println(column.getJdbcType());
        N.println(column.getSqlType());
        N.println(column.getTable());
        N.println(column.hashCode());
        assertEquals(column, table3.getColumn("id"));

        N.println(SQLTable.columnType2JavaType("NUMBER", "int", 1, 0));
        N.println(SQLTable.columnType2JavaType("NUMBER", "int", 2, 0));
        N.println(SQLTable.columnType2JavaType("NUMBER", "int", 5, 0));
        N.println(SQLTable.columnType2JavaType("NUMBER", "int", 10, 0));
        N.println(SQLTable.columnType2JavaType("NUMBER", "int", 18, 0));
        N.println(SQLTable.columnType2JavaType("NUMBER", "int", 40, 0));
        N.println(SQLTable.columnType2JavaType("NUMBER", "int", 80, 0));

        N.println(SQLTable.columnType2JavaType("NUMBER", "int", 1, 3));
        N.println(SQLTable.columnType2JavaType("NUMBER", "int", 2, 3));
        N.println(SQLTable.columnType2JavaType("NUMBER", "int", 5, 3));
        N.println(SQLTable.columnType2JavaType("NUMBER", "int", 10, 3));
        N.println(SQLTable.columnType2JavaType("NUMBER", "int", 20, 3));
        N.println(SQLTable.columnType2JavaType("NUMBER", "int", 40, 3));
        N.println(SQLTable.columnType2JavaType("NUMBER", "int", 80, 3));

        is = new FileInputStream(entityDefinitionXml);

        SQLEntityDefinitionFactory defFactory = SQLEntityDefinitionFactory.newInstance("test", is);
        IOUtil.close(is);

        Set<SQLEntityDefinitionFactory> set = N.asSet(defFactory);
        set.contains(defFactory);

        N.println(defFactory.toString());

        IOUtil.deleteIfExists(databaseXml);
        IOUtil.deleteIfExists(entityDefinitionXml);
    }

    //    public void test_printClassMethod() {
    //        CodeGenerator.printClassMethod(CassandraExecutor.StatementSettings.class, true, true, true, null, null);
    //    }

    public void test_generateClassMethod() {
        File srcDir = new File("./test/java");
        String packageName = "com.landawn.abacus.util.entity";

        LinkedHashMap<String, ?> fields = N.asLinkedHashMap("field1", int.class, "field2", N.typeOf("Map<Integer, Date>"));
        CodeGenerator2.generateEntity(srcDir, packageName, "AutoGeneratedClass0", fields, false, false, false, CodeGenerator._N);

        fields = N.asLinkedHashMap("field3", Date.class, "field4", N.typeOf("List<Calendar>"), "field5", "Date", "field6", "Optional<Timestamp>", "field7",
                "Range<Time>", "field8", "XML<Time>", "field9", "Map<List<com.landawn.abacus.util.stream.Stream<String>>, String>", "field10",
                "List<Map<String, List<Map<Float, Double>>>>");
        CodeGenerator2.generateEntity(srcDir, packageName, "AutoGeneratedClass", fields, true, true, true, null, AbstractDirtyMarker.class,
                ParentPropertyMode.FIRST, ParentPropertyMode.FIRST, N.class);

        AutoGeneratedClass a1 = new AutoGeneratedClass().setField6(Optional.of(DateUtil.currentTimestamp()));

        // assertEquals(a1, N.fromJSON(AutoGeneratedClass.class, N.toJSON(a1)));
        assertEquals(a1.getField6(), N.fromJSON(AutoGeneratedClass.class, N.toJSON(a1)).getField6());

        a1 = new AutoGeneratedClass().setField10(N.asList(N.asMap("abc", N.asList(N.asMap(1f, 123d)))));

        String json = N.toJSON(a1);
        N.println(json);
        N.println(N.toJSON(N.fromJSON(AutoGeneratedClass.class, json)));

        assertEquals(a1, N.fromJSON(AutoGeneratedClass.class, json));
        assertEquals(a1.getField10(), N.fromJSON(AutoGeneratedClass.class, json).getField10());
    }

    public void test_generator_01() {
        File srcDir = new File("./test/java");
        String packageName = "com.myPackage.x";

        Map<String, Object> fields = Builder.of(new LinkedHashMap<String, Object>())
                .put("firstName", String.class)
                .put("lastName", String.class)
                .put("birthdate", Date.class)
                .put("attrs", "LinkedHashMap<String, Integer>").val;
        CodeGenerator2.generateEntity(srcDir, packageName, "Account", fields, false, false, true, Objects.class);

        packageName = "com.myPackage.y";
        fields = N.asLinkedHashMap("firstName2", long.class, "list1", "List<String>", "list2", "List<Account2>", "map1", "Map<Account2, Account2>", "map2",
                "Map<String, Account2>", "map3", "Map<Account2, String>");
        CodeGenerator2.generateEntity(srcDir, packageName, "Account2", fields, true, true, true, null, com.myPackage.x.Account.class, ParentPropertyMode.FIRST,
                ParentPropertyMode.FIRST, CodeGenerator._N);

        Account2 account2 = new Account2().setAttrs(N.asLinkedHashMap("a", 1, "b", 2, "c", 3));
        Account2 copy = N.fromJSON(Account2.class, N.toJSON(account2));

        assertEquals(account2, copy);
    }

    @Test
    public void test_type() {
        String typeName = "int[]";
        N.println(N.typeOf(typeName).name());
        N.println(N.typeOf(typeName).clazz());

        typeName = "int[][]";
        N.println(N.typeOf(typeName).name());
        N.println(N.typeOf(typeName).clazz());

        typeName = "String[]";
        N.println(N.typeOf(typeName).name());
        N.println(N.typeOf(typeName).clazz());

        typeName = "String[][]";
        N.println(N.typeOf(typeName).name());
        N.println(N.typeOf(typeName).clazz());

        typeName = "Date[]";
        N.println(N.typeOf(typeName).name());
        N.println(N.typeOf(typeName).clazz());

        typeName = "Date[][]";
        N.println(N.typeOf(typeName).name());
        N.println(N.typeOf(typeName).clazz());

        typeName = "List[]";
        N.println(N.typeOf(typeName).name());
        N.println(N.typeOf(typeName).clazz());

        typeName = "List[][]";
        N.println(N.typeOf(typeName).name());
        N.println(N.typeOf(typeName).clazz());

        typeName = "ArrayList[]";
        N.println(N.typeOf(typeName).name());
        N.println(N.typeOf(typeName).clazz());

        typeName = "ArrayList[][]";
        N.println(N.typeOf(typeName).name());
        N.println(N.typeOf(typeName).clazz());

        typeName = "java.util.Date[]";
        N.println(N.typeOf(typeName).name());
        N.println(N.typeOf(typeName).clazz());

        typeName = "java.util.Date[][]";
        N.println(N.typeOf(typeName).name());
        N.println(N.typeOf(typeName).clazz());

        typeName = "JUDate[]";
        N.println(N.typeOf(typeName).name());
        N.println(N.typeOf(typeName).clazz());

        typeName = "JUDate[][]";
        N.println(N.typeOf(typeName).name());
        N.println(N.typeOf(typeName).clazz());
    }

    @Test
    public void test_writeClassMethod() {
        final File srcDir = new File("./src/test/java");
        final Map<String, String> fieldName2MethodNameMap = N.asMap("gui", "GUI");

        CodeGenerator.writeClassMethod(srcDir, Entity_1.class, true, true, true, null, fieldName2MethodNameMap, null);

        CodeGenerator.writeClassMethod(srcDir, Entity_2.class, true, true, true, null, null, null, null, N.class);

        CodeGenerator.writeClassMethod(srcDir, Entity_3.class, true, true, true, null, null, null, null, Objects.class);
    }

    @Test
    public void test_printTransfer() {
        CodeGenerator.printTransferMethod(Account.class, Account.class);

        CodeGenerator.printTransferMethod(Account.class, Account2.class);
    }

    public static Account account2Account(Account source) {
        final Account result = new Account();
        result.setId(source.getId());
        result.setGUI(source.getGUI());
        result.setEmailAddress(source.getEmailAddress());
        result.setFirstName(source.getFirstName());
        result.setMiddleName(source.getMiddleName());
        result.setLastName(source.getLastName());
        result.setBirthDate(source.getBirthDate());
        result.setStatus(source.getStatus());
        result.setLastUpdateTime(source.getLastUpdateTime());
        result.setCreateTime(source.getCreateTime());
        result.setContact(source.getContact());
        result.setDevices(source.getDevices());
        return result;
    }

    public static Account2 account2Account2(Account source) {
        final Account2 result = new Account2();
        // No set method found for: source.getId()
        // No set method found for: source.getGUI()
        // No set method found for: source.getEmailAddress()
        result.setFirstName(source.getFirstName());
        // No set method found for: source.getMiddleName()
        result.setLastName(source.getLastName());
        // Incompatible parameter type for: source.getBirthDate()
        // No set method found for: source.getStatus()
        // No set method found for: source.getLastUpdateTime()
        // No set method found for: source.getCreateTime()
        // No set method found for: source.getContact()
        // No set method found for: source.getDevices()
        return result;
    }

    //    @Test
    //    public void test_writeUtilClassForHashEqualsToString() {
    //        final File srcDir = new File("./test/java");
    //
    //        CodeGenerator.printUtilClassForHashEqualsToString("", "XXX");
    //
    //        CodeGenerator.writeUtilClassForHashEqualsToString(srcDir, this.getClass().getPackage().getName() + ".other", "HashEqualsToStringUtil");
    //    }

    static String propName2MethodName(String propName) {
        if (propName.equals("gui")) {
            return "GUI";
        } else {
            return StringUtil.capitalize(propName);
        }
    }
}
