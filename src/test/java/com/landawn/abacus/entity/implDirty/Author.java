/*
 * Generated by Abacus.
 */
package com.landawn.abacus.entity.implDirty;

import java.util.Collection;
import java.util.Set;
import java.util.List;
import java.sql.Timestamp;
import com.landawn.abacus.core.DirtyMarkerImpl;
import java.util.Objects;
import com.landawn.abacus.annotation.Id;
import com.landawn.abacus.annotation.Column;
import com.landawn.abacus.DirtyMarker;
import com.landawn.abacus.entity.implDirty.ImplDirtyPNL;
import javax.xml.bind.annotation.XmlTransient;
import com.landawn.abacus.annotation.Type;

/**
 * Generated by Abacus.
 * @version ${version}
 */
public class Author implements ImplDirtyPNL.AuthorPNL, DirtyMarker {
    private final DirtyMarkerImpl dirtyMarkerImpl = new DirtyMarkerImpl(__);

    @Id
    @Column("id")
    private long id;

    @Column("firstName")
    private String firstName;

    @Column("lastName")
    private String lastName;

    @Column("birthday")
    private Timestamp birthDay;

    private Contact contact;

    private List<Book> book;

    public Author() {
    }

    public Author(long id) {
        this();

        setId(id);
    }

    public Author(String firstName, String lastName, Timestamp birthDay, Contact contact, List<Book> book) {
        this();

        setFirstName(firstName);
        setLastName(lastName);
        setBirthDay(birthDay);
        setContact(contact);
        setBook(book);
    }

    public Author(long id, String firstName, String lastName, Timestamp birthDay, Contact contact, List<Book> book) {
        this();

        setId(id);
        setFirstName(firstName);
        setLastName(lastName);
        setBirthDay(birthDay);
        setContact(contact);
        setBook(book);
    }

    public String entityName() {
        return __;
    }

    @XmlTransient
    public boolean isDirty() {
        return dirtyMarkerImpl.isDirty() || (contact == null ? false : contact.isDirty()) || (book == null ? false : dirtyMarkerImpl.isEntityDirty(book));
    }

    @XmlTransient
    public boolean isDirty(String propName) {
        return dirtyMarkerImpl.isDirty(propName);
    }

    public void markDirty(boolean isDirty) {
        dirtyMarkerImpl.markDirty(isDirty);

        if (contact != null) {
            contact.markDirty(isDirty);
        }

        if (book != null) {
            dirtyMarkerImpl.markEntityDirty(book, isDirty);
        }
    }

    public void markDirty(String propName, boolean isDirty) {
        dirtyMarkerImpl.markDirty(propName, isDirty);
    }

    public void markDirty(Collection<String> propNames, boolean isDirty) {
        dirtyMarkerImpl.markDirty(propNames, isDirty);
    }

    @XmlTransient
    public Set<String> signedPropNames() {
        return dirtyMarkerImpl.signedPropNames();
    }

    @XmlTransient
    public Set<String> dirtyPropNames() {
        return dirtyMarkerImpl.dirtyPropNames();
    }

    @XmlTransient
    public void freeze() {
        dirtyMarkerImpl.freeze();
    }

    @XmlTransient
    public boolean frozen() {
        return dirtyMarkerImpl.frozen();
    }

    @XmlTransient
    public long version() {
        return dirtyMarkerImpl.version();
    }

    @Type("long")
    public long getId() {
        return id;
    }

    public Author setId(long id) {
        dirtyMarkerImpl.setUpdatedPropName(ID);
        this.id = id;

        return this;
    }

    @Type("String")
    public String getFirstName() {
        return firstName;
    }

    public Author setFirstName(String firstName) {
        dirtyMarkerImpl.setUpdatedPropName(FIRST_NAME);
        this.firstName = firstName;

        return this;
    }

    @Type("String")
    public String getLastName() {
        return lastName;
    }

    public Author setLastName(String lastName) {
        dirtyMarkerImpl.setUpdatedPropName(LAST_NAME);
        this.lastName = lastName;

        return this;
    }

    @Type("Timestamp")
    public Timestamp getBirthDay() {
        return birthDay;
    }

    public Author setBirthDay(Timestamp birthDay) {
        dirtyMarkerImpl.setUpdatedPropName(BIRTH_DAY);
        this.birthDay = birthDay;

        return this;
    }

    @Type("com.landawn.abacus.entity.implDirty.Contact")
    public Contact getContact() {
        return contact;
    }

    public Author setContact(Contact contact) {
        dirtyMarkerImpl.setUpdatedPropName(CONTACT);
        this.contact = contact;

        return this;
    }

    @Type("List<com.landawn.abacus.entity.implDirty.Book>")
    public List<Book> getBook() {
        return book;
    }

    public Author setBook(List<Book> book) {
        dirtyMarkerImpl.setUpdatedPropName(BOOK);
        this.book = book;

        return this;
    }

    public int hashCode() {
        int h = 17;
        h = 31 * h + Objects.hashCode(id);
        h = 31 * h + Objects.hashCode(firstName);
        h = 31 * h + Objects.hashCode(lastName);
        h = 31 * h + Objects.hashCode(birthDay);
        h = 31 * h + Objects.hashCode(contact);
        h = 31 * h + Objects.hashCode(book);

        return h;
    }

    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (obj instanceof Author) {
            final Author other = (Author) obj;

            return Objects.equals(id, other.id) && Objects.equals(firstName, other.firstName) && Objects.equals(lastName, other.lastName)
                    && Objects.equals(birthDay, other.birthDay) && Objects.equals(contact, other.contact) && Objects.equals(book, other.book);
        }

        return false;
    }

    public String toString() {
        return "{id=" + Objects.toString(id) + ", firstName=" + Objects.toString(firstName) + ", lastName=" + Objects.toString(lastName) + ", birthDay="
                + Objects.toString(birthDay) + ", contact=" + Objects.toString(contact) + ", book=" + Objects.toString(book) + "}";
    }
}
